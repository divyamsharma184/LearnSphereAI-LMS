// Mock data for development
export const mockCourses = [
  {
    id: 1,
    title: 'Introduction to React',
    description: 'Learn the fundamentals of React.js and build modern web applications.',
    instructor: 'Dr. Sarah Johnson',
    instructorId: 2,
    duration: '8 weeks',
    level: 'Beginner',
    category: 'Web Development',
    image: 'https://images.pexels.com/photos/11035380/pexels-photo-11035380.jpeg?auto=compress&cs=tinysrgb&w=800',
    enrolledStudents: 45,
    maxStudents: 50,
    startDate: '2024-02-01',
    endDate: '2024-03-29',
    status: 'active',
    modules: [
      { id: 1, title: 'Getting Started with React', completed: true },
      { id: 2, title: 'Components and Props', completed: true },
      { id: 3, title: 'State and Lifecycle', completed: false },
      { id: 4, title: 'Handling Events', completed: false },
    ],
    assignments: [
      { id: 1, title: 'Build a Todo App', dueDate: '2024-02-15', submitted: true, grade: 85 },
      { id: 2, title: 'Component Library', dueDate: '2024-02-28', submitted: false, grade: null },
    ],
    progress: 65,
  },
  {
    id: 2,
    title: 'Advanced JavaScript',
    description: 'Master advanced JavaScript concepts and modern ES6+ features.',
    instructor: 'Prof. Michael Chen',
    instructorId: 3,
    duration: '10 weeks',
    level: 'Advanced',
    category: 'Programming',
    image: 'https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=800',
    enrolledStudents: 32,
    maxStudents: 40,
    startDate: '2024-01-15',
    endDate: '2024-03-22',
    status: 'active',
    modules: [
      { id: 1, title: 'Closures and Scope', completed: true },
      { id: 2, title: 'Promises and Async/Await', completed: false },
      { id: 3, title: 'Modules and Bundling', completed: false },
    ],
    assignments: [
      { id: 1, title: 'Async Programming Challenge', dueDate: '2024-02-10', submitted: true, grade: 92 },
    ],
    progress: 30,
  },
  {
    id: 3,
    title: 'UI/UX Design Principles',
    description: 'Learn the fundamentals of user interface and user experience design.',
    instructor: 'Ms. Emily Rodriguez',
    instructorId: 4,
    duration: '6 weeks',
    level: 'Intermediate',
    category: 'Design',
    image: 'https://images.pexels.com/photos/196644/pexels-photo-196644.jpeg?auto=compress&cs=tinysrgb&w=800',
    enrolledStudents: 28,
    maxStudents: 35,
    startDate: '2024-02-05',
    endDate: '2024-03-15',
    status: 'active',
    modules: [
      { id: 1, title: 'Design Thinking Process', completed: false },
      { id: 2, title: 'Wireframing and Prototyping', completed: false },
    ],
    assignments: [],
    progress: 0,
  },
];

export const mockUsers = [
  {
    id: 1,
    name: 'Admin User',
    email: 'admin@learnsphere.com',
    role: 'admin',
    avatar: 'https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&w=150',
    joinDate: '2023-01-01',
    status: 'active',
  },
  {
    id: 2,
    name: 'Dr. Sarah Johnson',
    email: 'sarah.johnson@learnsphere.com',
    role: 'instructor',
    avatar: 'https://images.pexels.com/photos/415829/pexels-photo-415829.jpeg?auto=compress&cs=tinysrgb&w=150',
    joinDate: '2023-02-15',
    status: 'active',
    department: 'Computer Science',
    coursesTeaching: [1],
  },
  {
    id: 3,
    name: 'Prof. Michael Chen',
    email: 'michael.chen@learnsphere.com',
    role: 'instructor',
    avatar: 'https://images.pexels.com/photos/2379004/pexels-photo-2379004.jpeg?auto=compress&cs=tinysrgb&w=150',
    joinDate: '2023-01-20',
    status: 'active',
    department: 'Computer Science',
    coursesTeaching: [2],
  },
  {
    id: 4,
    name: 'Ms. Emily Rodriguez',
    email: 'emily.rodriguez@learnsphere.com',
    role: 'instructor',
    avatar: 'https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?auto=compress&cs=tinysrgb&w=150',
    joinDate: '2023-03-10',
    status: 'active',
    department: 'Design',
    coursesTeaching: [3],
  },
  {
    id: 5,
    name: 'John Smith',
    email: 'john.smith@student.learnsphere.com',
    role: 'student',
    avatar: 'https://images.pexels.com/photos/1222271/pexels-photo-1222271.jpeg?auto=compress&cs=tinysrgb&w=150',
    joinDate: '2023-09-01',
    status: 'active',
    enrolledCourses: [1, 2],
    year: 'Sophomore',
    major: 'Computer Science',
  },
];

export const mockAnnouncements = [
  {
    id: 1,
    title: 'Welcome to the New Semester!',
    content: 'We are excited to start this new semester with you. Please check your course schedules and make sure you have access to all materials.',
    author: 'Admin Team',
    date: '2024-01-15',
    priority: 'high',
    courseId: null, // Global announcement
  },
  {
    id: 2,
    title: 'Assignment Deadline Extended',
    content: 'The React Todo App assignment deadline has been extended to February 20th due to technical issues.',
    author: 'Dr. Sarah Johnson',
    date: '2024-02-10',
    priority: 'medium',
    courseId: 1,
  },
];

export const mockDiscussions = [
  {
    id: 1,
    courseId: 1,
    title: 'Help with useState Hook',
    content: 'I am having trouble understanding when to use useState vs useEffect. Can someone explain the difference and when to use each one?',
    author: 'John Smith',
    authorId: 5,
    date: '2024-02-08',
    replies: [
      {
        id: 1,
        content: 'useState is for managing component state, while useEffect is for side effects like API calls. useState triggers re-renders when state changes, useEffect runs after renders.',
        author: 'Dr. Sarah Johnson',
        authorId: 2,
        date: '2024-02-08',
      },
      {
        id: 2,
        content: 'Great explanation! To add to that, useState is synchronous while useEffect can handle asynchronous operations. Think of useState for data that changes over time, and useEffect for actions that need to happen in response to those changes.',
        author: 'Prof. Michael Chen',
        authorId: 3,
        date: '2024-02-09',
      },
    ],
  },
  {
    id: 2,
    courseId: 2,
    title: 'Best Practices for Async/Await',
    content: 'What are some best practices when working with async/await in JavaScript? I keep running into issues with error handling.',
    author: 'Jane Doe',
    authorId: 6,
    date: '2024-02-07',
    replies: [
      {
        id: 1,
        content: 'Always use try-catch blocks with async/await for proper error handling. Also, remember that await can only be used inside async functions.',
        author: 'Prof. Michael Chen',
        authorId: 3,
        date: '2024-02-07',
      },
    ],
  },
];